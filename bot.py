import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor
from database import SessionLocal, create_user, get_user, update_balance, initialize_users
from config import ngrok_url, TOKEN, ADMIN_USER_IDS




'''hehe wwqix'''




API_TOKEN = TOKEN

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    '''—Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ id, first_name –≤ –±–¥'''
    logger.info(f"Received /start command from user {message.from_user.id}")
    db = SessionLocal()
    user = get_user(db, message.from_user.id)
    if not user:
        create_user(db, message.from_user.id, message.from_user.first_name)
        initialize_users(db)


    web_app_url = f"{ngrok_url}/?user_id={message.from_user.id}"
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üí∞–°—Ç–∞—Ä—Ç", web_app=types.WebAppInfo(url=web_app_url))
    )
    await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç, @{message.from_user.username}!\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá", reply_markup=keyboard)


@dp.message_handler(commands=['add_balance'])
async def cmd_add_balance(message: types.Message):
    '''–∞–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ü•Æ –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'''
    if message.from_user.id not in ADMIN_USER_IDS:
        await message.reply("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    args = message.text.split()
    if len(args) != 3:
        await message.reply("–ò–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /add_balance <id_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>")
        return

    user_id = int(args[1])
    amount = int(args[2])

    db = SessionLocal()
    user = get_user(db, user_id)
    if user:
        user.balance += amount
        db.commit()
        await message.reply(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {amount} ü•Æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user.balance}")
    else:
        await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

